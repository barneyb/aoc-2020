package com.barneyb.aoc.aoc2020;

import lombok.Data;
import lombok.Value;

import java.awt.*;
import java.util.Queue;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Aoc2020Day20JurassicJigsaw {

    public static void main(String[] args) {
        var tiles = parse();
        System.out.println("Part One: " + partOne(tiles));
    }

    static long partOne(Tile[] tiles) {
        Queue<Tile> looseTiles = new LinkedList<>(Arrays.asList(tiles));
        var puzzle = new Puzzle(looseTiles.remove());
        Tile loose;
        int iterations = 0;
        next_loose_tile:
        while ((loose = looseTiles.poll()) != null) {
            iterations += 1;
            if (iterations > tiles.length * tiles.length / 2) {
                // worst case scenario is one tile (the last one) per round
                System.out.println("\n\nSHIT'S FUCKED\n\n");
                break;
            }
            System.out.println("Examine " + loose);
            var ops = puzzle.getOpenPositions().iterator();
            while (ops.hasNext()) {
                var op = ops.next();
                if (op.accepts(loose)) {
                    continue next_loose_tile;
                }
            }
            // nothing accepted it; put it back flipped over
            loose.flip();
            looseTiles.add(loose);
        }
        System.out.println("=".repeat(80));
        Arrays.sort(tiles, Comparator.comparingInt(Tile::getNeighborCount));
        for (var t : tiles) {
            System.out.println(t);
        }
        return Arrays.stream(tiles)
                .filter(t -> t.getNeighborCount() == 2)
                .map(t -> t.num)
                .reduce(1L, (n, m) -> n * m);
    }

    private static Tile[] parse() {
        return new Tile[]{
                new Tile(2297, "###.###..#.....#.#.#......##.#..........##....#...#.#...##.###...#..###...#.#####.##.###..####..#.##"),
                new Tile(2459, "..#.#.#..#..###...#.#....#.#.#...#.#.#..#..#.....####.#...##.#....#...##....#......#......##....#.##"),
                new Tile(3547, ".#..##.##.....####..#....#..#.#......#.#...####.##...#.#.......##..#.####.###...#....#...###.###...#"),
                new Tile(1741, "###.###...#.#.#....##..#...######...##.#.....#..#.#........#...#.....#.........#....#.#..######.#.##"),
                new Tile(2237, "#....#..##...#.....###.......#.#..............#..###..######....#...###...#.#..#...#.......#.##..##."),
                new Tile(1889, "#..###.####.####...#....##.#.#...#.#...#..........#...#.##.##..#.##.###...#.....###.#..#.#.#..#..##."),
                new Tile(3061, "##.####...#.##...#..#.....##..#.....#..##.....#.#.#.#......#.#.##....#.#.......##.#.#...#.#...#...##"),
                new Tile(1907, "#...#.###....#..#..###.###...##....#...###...#..##.###.......#..#..##.#....##..#.#....##...#...#####"),
                new Tile(1193, "#..##..##....#.....#......#....#......#..#.##...##..#..#...##.#.....##...#.#....#..##.....####..##.."),
                new Tile(3733, "###.##...##......#..##....#...##..###...##.##.###.#........##....#...#.....###...#......##....##..##"),
                new Tile(1327, "#####.##.#..#.....##.#...#..#.#..#..##.#..#.............#...#...#..#####..............#....###.#.###"),
                new Tile(3907, "..#..##.###......##....##....#.........#.###..#...#.#.#.....#..#.....#.#..##.#.#....#....#.#.#..#.##"),
                new Tile(3019, "###......##...#..#.##..#.#....#..#.....#.....###...........#..#.......##.#.....##.....#.#....##...##"),
                new Tile(1277, "..####.##..............#...#.#......#...#..#.#...#.#...#...###....#.##..#.....###.......#.#.....##.."),
                new Tile(2659, "##...#...#..#....###.#.#..#..#....#.##.......#...##.#.....................##..##...........#..####.#"),
                new Tile(3673, "..###..#....#.................##....#.#.....#..#.....#......#..#...#.#......#.....##.#...##.##......"),
                new Tile(3329, "#....#..#.#....#...###.#.....#.......#.##..##.#.#.#...##....##.#.##...#........#.#...##.#..####...#."),
                new Tile(2383, "#...####.###......##.......####...........#..#..##.#.####.#..#..##...##.#..#......#.#..#.#......####"),
                new Tile(2377, "...#....#.....#..#.#.#.......##....##.....#.####..#.......#........#......#...##.......#..##..#..#.."),
                new Tile(1931, "###.#...##...##...##.#.#..#.#.#...#.##.#.........###...........#..#.........#.#.#...#...####..#..#.."),
                new Tile(3911, "#..####......##..#..##.....#..###.....##.............#..##.##......####.#....#.##..#.###.#.....#####"),
                new Tile(3251, "##.##.#.#.#....#.#..#....#...##.#...#.#.#.......##..#....#....##...#...#.#..#..#..#.#..#.##..#......"),
                new Tile(1879, "##.#.#.###...#...#.#.#.#.#....#..#.##..##.......###........#..##.......#.....#.#...#....##.###.#.###"),
                new Tile(2819, "#.#....###..#....##.#.#.........#.#..#.#.#.#......#...#......#...#.....#..#.##...###..#.##...##.#.##"),
                new Tile(2351, "..#..##.#.#.#....#..#.##...##.........###....#.......#....#.#.#.##.....##.#.##.#.##.......###..#..##"),
                new Tile(2801, "#.#....#..#......##..#..#..#......#...##....##.#..##........#.##.#.#...##...#.............###..##.#."),
                new Tile(1873, "#.#.....###........##........#.#................#.......#.#....#..........#.....#.#.......#.#...#..#"),
                new Tile(2437, "###.##..#.#.##..##....#.#...###.....##.###.......#....#..#..#..##...#...#.##..........##....##..#..."),
                new Tile(2579, "#..##.######.#...#.#.##..#...###.....#..###.......#....#....#..#.#...##...#...##.#.#....###.#..#...."),
                new Tile(1609, ".#..##.##.#..##....##....#..###....#.####.####....##..##.#....#.#...#....##....##...##...###..#..###"),
                new Tile(3929, "..###...####........##.##....#..#..#.#....#.#....##.##..#....##......###.#.....##.......##..##.##..."),
                new Tile(1487, "..####.#..#.#.#...#..........##...#.....#......#..#......#.####......##..#.###.........#.##..##..###"),
                new Tile(1811, "..#....##...#.#...#........#.....#.#...##..##...#...........#...#...##....#....##.#...#....#.#..###."),
                new Tile(1747, "#..##.#.#.#..#........#.###..#..#.#.....#.##.....##........###...###.....#...#....#.#..#.##..##.###."),
                new Tile(3779, "#.#####......#.....#..#.#....#.#.#......##.....##.##.....####.##.#.###.#.#.###.#....#...........#..."),
                new Tile(3767, ".##.##.####.#.....#.#...#..##.###....##......##.....#.............#..#....#..#..#......#..##..#.#..."),
                new Tile(1871, ".#.###...###...###..#..#...###......#..##....####.#.#......#..........##......#...........##..#.##.#"),
                new Tile(3803, "##..#.#..##........##.............#...#.#.#...##.##..##.....###...#...#.##.#.#.#...#####.##..#.#...."),
                new Tile(2441, ".##..#.#.#.........##..#..#.###...#...##.....#..#....#.#...##........#..##.#.#.##....#...#.#..#..###"),
                new Tile(3373, "..###........##....##...##.....#........#.......#...#..........#.#...##.....##............#####.#..."),
                new Tile(1721, "###.....###............#......#.....#.....#......##........##..#....#.#.......#..#....#...#.##....#."),
                new Tile(3499, "####...#.#...##....##...#..#.....#......#.....##...........#.#.......#.#..#...###..#...##..#######.."),
                new Tile(3851, "#.##.#....#..#....##.#.##....#.........##..#.#..#......#...##.#.#....##.....#..#####.....#######.#.#"),
                new Tile(1181, "...#..####....#....##.......####.........##....#.#..#......##.....#..#.....#..#.#..####..#..#####.##"),
                new Tile(2269, "##.#...###..##.#.#.###......##.....#...#.#.......##.#..##..###.........#........##.....#...##......#"),
                new Tile(2903, ".#.#.###...#..#.#..#........#...#....#..#.....#.........###.#.#....#..#.#.#.#...#........####.##...#"),
                new Tile(2927, ".##..####.#.......#.#........##.....##.###..........#.......#.......##.##..#.#.........#.....#..#..#"),
                new Tile(2083, "#.##.#..##...#...##........##....#..#...###..#...###.......####.#........#.......#..#....#...###..##"),
                new Tile(1621, "#.###.###.................##..#.#....#.#.#.#.###.##.........#......#.##.#.##....#...##...#.#####...."),
                new Tile(2797, "........###..#.....#..........###.....###........##.........#....####....#.###.#......#.###...#.#.#."),
                new Tile(1433, ".##..#....#.....#.#..#.......#..#..#.#.#....#.....#.#.........#.#..##.#....#.#...........#..#.##..##"),
                new Tile(1259, ".###...#..#..#..#.###..#.#....##..##.####.#...#.##.......#.##.#....#.#.##..##..#.##..#.....######.#."),
                new Tile(1657, "#..##..##...###....####........##.#....##.......####.#................#.#.....##..#..#.....#.#..#.##"),
                new Tile(3323, "..##.#####....##..#.#.#......##....#..###..#.....###.........###.##....#.....###...#..#..#.##..###.."),
                new Tile(2203, "##....##.##.#.#..#.#...#.##...#....#.#.##..........##..#...##.....#.#..##.#..#.#.#...#...#...###...."),
                new Tile(2477, "#######.....#....#..#.........#.#.....###...##.......#.....##......#........#...####.#..##.#....####"),
                new Tile(3343, "#.#####.#.....#..#..........##..#.##.....#..#....#.....#....#.#.#....#...#....###.##.#...#.#..##..##"),
                new Tile(3821, "#.##..#..#.........#.#................#...#.......#.##......#......#......###.#.#..#......#.#.#....."),
                new Tile(3347, "####....#.#.........#...#......#..#......#.......#....#..#.#.#.#.....#...#...........##..#.#######.."),
                new Tile(3877, ".#.#.####........#.##.......#.#..#.#.#.#..#.#.#...##.......#....#...#...##..#..###.##..#..#..#...#.#"),
                new Tile(3739, ".##.###.#.#.##.....##.............#....##....#.....#.#.......#......#....#...............###.#.##.#."),
                new Tile(3257, "..##.###.......##.###..###..##.......#......#.......##......#.#......##....#....#...##....#..####.#."),
                new Tile(2969, "#.#.........#......#...#.....#.#.......##..#......#..#.....##.#....##...#.....###..#.#..#....##.#..#"),
                new Tile(1097, "#####...#.#..####..#.##.#.##.##.......####.......##...#..#.##.......##.......#........#.....#.#.##.#"),
                new Tile(2011, "#.##.....##....#..##.....#......##.#...##...#........##.##..###.##..###.#.##...##....#...##.##..#.##"),
                new Tile(1399, "#####..#.#.###.#...##......#.#...#.#....##..#.#.#.......#.##......#..##..#.#....#.#...#..###..####.#"),
                new Tile(3449, ".###..#....###..#.#...........#.......##...#..######.......#.....#.#.##.#..#.#.#.#...#..#.#.##.#...#"),
                new Tile(2897, "#.#.........##......#..#....##.#........#.#...#......#....###.##..#.....#.#......#.#.......##..#..##"),
                new Tile(1153, "....#.#...#.##.##..#..#.##.#.#.#...#.#....#...#.........#.##.#.......##.....#.#..#...#...#.....#...#"),
                new Tile(2789, "#...####.###.#.....#.......#........#..#......#..#..#.....##....##..###...#.#..###...#.#....##.#...."),
                new Tile(1637, ".....#.#....#..#...##.....#.##.#..#.....#..#.....#..#.#.##.#.......#.#....#.....##.#.....###..#...#."),
                new Tile(2029, ".#.#...#..#...##...##.....##.###...#.##.#.#..#....#.....#...#....................#.###.#...#...####."),
                new Tile(2239, ".####..#.....#...#.###..#....#............#......#.#........##............................#..#####.#"),
                new Tile(2663, ".#...#...#....#.#...#....#...#..##..###.#....##...##.........#...#..##.........#.#...##.#...#...#..."),
                new Tile(1567, "..###.##..#...#..#..#.#......##......#..#.#..#..##.#..#.#..##.......#.#.#.#...#.....#....#..#.....##"),
                new Tile(2467, ".##########..#......#.#.....#......#..#.#...#....####.......##...#.#.#...#.#..###.....##.##..##.#..#"),
                new Tile(1447, ".#####..#....#..#....#..#..#.....#.#.#.#.#..........#.......#.......#.#.##..#............######.##.#"),
                new Tile(3863, ".#...##..#.#..#..#...........##......#.##...##.....#........#..##..#......#..##.#.......##.##...##.."),
                new Tile(3761, "..#....####..........#....#.####.......#.........##............#...#..#......#........##..#...##...."),
                new Tile(2027, ".##.#.##..#.....#.##....#....#....#.#...#.....#.#.....#.#...####...........##.........#..#....#...##"),
                new Tile(1279, "..#.#####.#.#....#..#.......#.#.....#....#..............##.##......#..#.......##.#...#.....####..#.."),
                new Tile(1997, "#.#.#...#.......#..####.......#.......#.#..#........#...#..#...##........#..................##...##."),
                new Tile(3049, "..##.##..........#..#...#....##..#.#.....#..#.#.#..#.##...##......#...#..#....#...........##...#.###"),
                new Tile(3209, "##..###.##.....#..#.#.#.#...###.#...#.##....#...#...#.......#....#..#####...#...#......#.###.#...###"),
                new Tile(3719, "####.##..#.........#..#.......#.#........##....##.#.....#..#.#.#..##.##.#.#.....##..#.#.#...#...##.."),
                new Tile(3217, "..##.####....#.....#.#.......#.......#..#...#.#.....#.#..#...##......##.............#...##..##..##.#"),
                new Tile(1913, "######.#.###....#.#..........##.#.#.....#..##.#..##.....##.#........##........#.#.....#...###..##..#"),
                new Tile(2729, ".###.#..#...#..#...##..#.#.#...#...#...##......#.....#..##.#...........#........#.#...##.###.####.#."),
                new Tile(3089, "#...#.#.#...###.##..#.#...##..#......##...#...###.#........#.###..##.##..#......#...#..#.##..#####.."),
                new Tile(3923, ".......##.##.......##...#.#.#........#...#.......##......##.#.#...#..#.....#..#.#.....#....#..##.###"),
                new Tile(3229, "##..####.#.....#..#.#.#..#..#................#.............##.#.#.##.##.#........#.#...#####..#.#.#."),
                new Tile(1571, "###....##..#.#..###.##....####..#.#..#.......#.....#....#..#....#.##.##..#.###.#..#.....#..##..###.#"),
                new Tile(1063, "####.#####.#....#...#......#.#........##..##...#.###....#..##...##.#..###.......#....#...#####.####."),
                new Tile(1663, "..###.####.....##..#..#...##..#..#..#...#.#..........##.....#....#.#.##.#..##..........#..#.###.##.."),
                new Tile(1987, "..#...#.......#...##.#...#...#...........#....#.######....#.......#...........###.....##.#....###.#."),
                new Tile(2803, ".##.#.##.##.#.....#.#..#....#.....#.#..#...#..#...#.#..##..#.#.##..##...#...#.#.#.##.#.....#.###..##"),
                new Tile(1699, ".#.##.##.##.#.......##.##...........##...#....#..#...................##...#........###.##.#....#####"),
                new Tile(1999, "..#..##..##..###...#....##...#.#....#............##...#..............##....#..##............#...####"),
                new Tile(1733, "#....#..####..#....##....#...####.......#..#...#.#.....#...#.#.......#.#....#..#..#.#.#.##......####"),
                new Tile(2273, "#...#..###.#.##.#..####..##..###....#........#..#....#..#...#..#.#...##...........##...#...###.#.#.."),
                new Tile(1493, "##.#...##.#...#...##..#......###..#.....##............#.....#......###......#...##.....#..#.#.#....."),
                new Tile(3637, "..##.#.#..#..###...#....#..##.##......#.##.#.#...#..#...#..##...#.......#..##........#..##.#.##...##"),
                new Tile(2333, "##.#...#..#......###..#.....##.##......#...##.##..#..#.#.#......#.##.#...#...#.#.###....#..#.#.##..#"),
                new Tile(1201, "..#.#.####..#...##..#..##....##.#...#........#.......#....#.....#....#...#.......##..##.#####.#..##."),
                new Tile(2243, "#..######..........#...#....###...#..#..#..#....#......##........#.#..#........#.#....#.######.#.#.#"),
                new Tile(1667, "##...##..#....##...###..#..###.....#..###........#..#......##....#..###.........##....##..#..###...#"),
                new Tile(2053, "#.##.####.#..##..##.......#.##.....#...##.##...#..###.##..#####.#..#..#..#...#.##.#.#..####.#..####."),
                new Tile(3407, ".##......##........#......#..#...#.#..###....##...#....#..###...#....#....#.###...#...#..#..##.##.#."),
                new Tile(2687, "###.#..#.#...#####.###.#.....###.#.........##..##.#...#....##.........#.........#........#..##.#...."),
                new Tile(1973, "##..#.###.###..#.##.####.....##...#.....#....#...###.#....#.#.#.##.#.####..#.#.###......#..#.....#.."),
                new Tile(2693, ".##.....#.....#....##.#.#..#...##...#..###......####.#.#.##..#....#..#....##...#.#......##...#.#.#.."),
                new Tile(2141, "....#####..........#...#.#..##.......#.##...#.#................#........#.#.#...#.#.#....#.......###"),
                new Tile(1163, "##.#.##.###.....#.#..#.###......#..#..#.#......#.##.......#..#...#.#...#...#..##...#....##...#.....#"),
                new Tile(1091, "##.##...###.............#.....#........##...#.##.###.##.#..#.........#.........#......#.######...###"),
                new Tile(2281, "...##...#.....#...###..#.#...#..#.#.....###......#.#......###........#.......###.....#....##.#.#.##."),
                new Tile(2767, ".##...#..#............#....##.#..##....#..#....#.....##.#..#..#####..##...###.###....#...####.##.##."),
                new Tile(1697, "..###.#.#.#####..#.#...#...#.##.##...####.#..##.........#..#.##...####..###.#...#.##...#.##.#...#.#."),
                new Tile(1409, ".######....##.....###....#..#.....#...###...#.#.###..#....###......#.##...#..#.##.##.......###.#..#."),
                new Tile(3001, "###....#..##.#..#..#####..#...#......#...#.#...##...#.#.##.#..#...#.#.####..##...........##..#.##..."),
                new Tile(1321, "..####.#.#.##..........##.....#......##.##..#..............###.##...###.##.........#.#...###.###.#.."),
                new Tile(2707, "###.#..##..#....##.##...#..##.#....#....#.........#...#......##..#....#.#..#..####....####..#.##.##."),
                new Tile(2689, "#.#.##.##..#......###...#...#...#...#.....#......#..#.#.##................#.....#........#.#.#.####."),
                new Tile(2551, ".........#.#.......##..###...#.#.#...............#.#........#..#....##.#####....#........#.###..##.."),
                new Tile(1831, "##.#.#####...#...####..#....#..#..#...#.###......###..#..##.#..#.....#..#......#..##.....##.....#.#."),
                new Tile(2423, "##.#.#..............#.........##......#.#.##.....###..#....#....###..#####.#..#.####..#....#.#..###."),
                new Tile(1373, ".#..##.#.....#..#...#......#..#.##..#.##..#..#....##......###....#....##..###...#....#.#.##...#.###."),
                new Tile(1123, "##.#..#..##.....#.###..##.##.##....#...#..#.#.....##.##.....#...#..#.##..#.#...............###......"),
                new Tile(2647, "..#.##.##.#......#.#........#.#....####...........##....#.##...#..........#......##.....#..#...##.##"),
                new Tile(2557, "...#..###......##.......##..#...#..#.#..##....#..##.......#.##......###.#..###...#.#.##....###.##..#"),
                new Tile(2003, "#..#...#..#.#......#..#.#.....#.......##.....#.........#...#....##.#........#..#...##.#..###....#.##"),
                new Tile(1051, "#..#....###..#...###.......###...##..#.##...#.....#......##.#.......#...##....##.......#.#.#.##..###"),
                new Tile(3613, "..#.#..##.....#...#.##.....#.....#....##.##..#...#..#.#..#..##..#.....##..##...#......##.###.#.##.#."),
                new Tile(3529, ".#..#.#.##.#.##..#..##..##...##...#....#...#....###........#.#...#...#...##.#...#....##..###.#.#.#.#"),
                new Tile(1291, "#.#.##...#..#.....#.#.....#...##.###.##..#.#.#.....#...##.#...#...#.#......#..#.#...#..#..#..#.#..#."),
                new Tile(3023, "..#.#..#..#...###....#.......#.#..#.....##...............#.##.......##.....#...##.##.......#.######."),
                new Tile(1307, "##.###.##.#.#..#.....#....#...#.#.....#....#.....#....#.#...#........###....#......#.......#.##....."),
                new Tile(1301, "###.####.#.....#......#..#.#....##..#..##.#.#....#.#...#..###....#..#..#.###.....##.#..#.#...####..#"),
                new Tile(3769, "#.#.....#..........#...##...#.......##..#........##...#......#..#..###....#...#.#......#.####....#.#"),
                new Tile(3727, "..##.##.#..........#...#.#...##..#.####.#..#..#..##..#..##......##...##..#.#...#...#.......#.#.##.##"),
                new Tile(2851, "..#...##.#.#.##.#...##.....#.#..##.#...###....#..##..#..##.##.##.#.###.....##......#.#......##..####"),
                new Tile(1787, ".#..#....##..#.#...##........#.......#.....#.....##.....#..##..#....###.....#.####.......#....###..#"),
                new Tile(2957, "#.##..#..##..#.##.#........#....##.##......#.....#.##....#.....#...#...#.##..##.#..#.........#.##.#."),
                new Tile(1453, ".#..#.....#..#.......#......#.##..#.#..#......#...#####...####...#..#.#.....#.##.....###..####.#...."),
                new Tile(1549, ".###............#..##..#.#.#.###...#....#.#.##..#.#...#...##........#.##....#..#.#...###..##.##..###")
        };
    }

    enum Dir {
        North,
        South,
        East,
        West;

        Dir cw() {
            switch (this) {
                case North:
                    return East;
                case South:
                    return West;
                case East:
                    return South;
                case West:
                    return North;
                default:
                    throw new IllegalStateException("what?!");
            }
        }

        Dir ccw() {
            switch (this) {
                case North:
                    return West;
                case South:
                    return East;
                case East:
                    return North;
                case West:
                    return South;
                default:
                    throw new IllegalStateException("what?!");
            }
        }

        public Dir flip() {
            switch (this) {
                case North:
                    return South;
                case South:
                    return North;
                case East:
                    return West;
                case West:
                    return East;
                default:
                    throw new IllegalStateException("what?!");
            }
        }
    }

    static class Tile {
        final long num;
        final int dim;

        private String pixels;
        private String[] edges;
        private Set<Tile> neighbors;

        public Tile(int num, String pixels) {
            this.num = num;
            this.pixels = pixels;
            this.dim = (int) Math.sqrt(pixels.length());
            this.edges = extractEdges();
            this.neighbors = new HashSet<>();
        }

        private String[] extractEdges() {
            return new String[]{
                    getRow(0),
                    reverse(getRow(dim - 1)),
                    getColumn(dim - 1),
                    reverse(getColumn(0))
            };
        }

        private String reverse(String s) {
            var sb = new StringBuilder(s.length());
            for (int i = s.length() - 1; i >= 0; i--) {
                sb.append(s.charAt(i));
            }
            return sb.toString();
        }

        private String getRow(int r) {
            int offset = r * dim;
            return pixels.substring(offset, offset + dim);
        }

        private String getColumn(int c) {
            var sb = new StringBuilder();
            for (int i = c, l = pixels.length(); i < l; i += dim) {
                sb.append(pixels.charAt(i));
            }
            return sb.toString();
        }

        public String getPixels() {
            return pixels;
        }

        @Override
        public String toString() {
            var sj = new StringJoiner(",", num + "[", "] " + getNeighborCount());
            for (var t : neighbors) {
                sj.add(t == null ? "    " : "" + t.num);
            }
            return sj.toString();
        }

        String getEdge(Dir d) {
            return this.edges[d.ordinal()];
        }

        private void transform(Function<Point, Point> getSource) {
            var sb = new StringBuilder(pixels.length());
            for (int y = 0; y < dim; y++) {
                for (int x = 0; x < dim; x++) {
                    Point p = getSource.apply(new Point(x, y));
                    sb.append(pixels.charAt(p.x * dim + p.y));
                }
            }
            pixels = sb.toString();
            edges = extractEdges();
        }

        /**
         * I flip the tile along a vertical axis as if it were sitting on a
         * table and you were to grab the bottom edge, pick it up, roll your
         * wrist over, and set it back down.
         */
        void flip() {
            //noinspection SuspiciousNameCombination
            transform(p -> new Point(p.y, dim - p.x - 1));
        }

        /**
         * I rotate the tile 90 degrees clockwise without picking it up.
         */
        void rotate() {
            transform(p -> new Point(dim - p.x - 1, p.y));
        }

        boolean addNeighbor(Tile t) {
            if (neighbors.contains(t)) {
                throw new IllegalArgumentException(t + " is already a neighbor of " + this);
            }
            return neighbors.add(t);
        }

        int getNeighborCount() {
            return neighbors.size();
        }
    }

    @Value
    static class Placement {
        Tile t;
        Point p;
    }

    interface Position {
        boolean accepts(Tile t);
    }

    static class Puzzle {
        private final Map<Point, Placement> byPoint;
        private final Map<Tile, Placement> byTile;

        @Data
        private class PosImpl implements Position {
            final Point p;

            public boolean accepts(Tile tile) {
                var constrainingPoints = neighbors(p)
                        .filter(byPoint::containsKey)
                        .collect(Collectors.toList());
                if (constrainingPoints.stream().allMatch(n -> {
                    var t = byPoint.get(n).t;
                    return Arrays.stream(tile.edges).anyMatch(pe ->
                            Arrays.asList(t.edges).contains(pe));
                })) {
                    place(p, tile);
                    for (var cp : constrainingPoints) {
                        tile.addNeighbor(byPoint.get(cp).t);
                    }
                    return true;
                }
                return false;
            }
        }

        public Puzzle(Tile firstPiece) {
            this.byPoint = new HashMap<>();
            this.byTile = new HashMap<>();
            place(new Point(0, 0), firstPiece);
        }

        private void place(Point p, Tile t) {
            var placement = new Placement(t, p);
            byPoint.put(p, placement);
            byTile.put(t, placement);

        }

        public Stream<Position> getOpenPositions() {
            Set<Point> uniquer = new HashSet<>();
            return byPoint.keySet().stream()
                    .flatMap(Puzzle::neighbors)
                    .filter(uniquer::add)
                    .map(PosImpl::new);
        }

        private static Stream<Point> neighbors(Point p) {
            return Stream.of(
                    new Point(p.x + 1, p.y),
                    new Point(p.x - 1, p.y),
                    new Point(p.x, p.y + 1),
                    new Point(p.x, p.y - 1)
            );
        }

    }
}
